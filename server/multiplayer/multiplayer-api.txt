client-to-server HTTP REQUESTS

POST create-room {
    userID: string
} response {
    success: boolean
    roomID?: string
}
    creates a room where user is admin

POST generate-slot-access-code {
    slotID: string
} response {
    success: boolean // whether slot exists and is vacant
    accessCode?: number 4-digit access code
}

POST revoke-slot-access-code {
    slotID: string
} response {
    success: boolean
}

GET does-room-exist {
    roomID: string
} response {
    success: boolean
}

POST join-room-play {
    accessCode: number // 4 digit access code for some slot in some room
    userID: string // HAS to be a user
} response {
    success: boolean // whether user is allowed to join room at slot
    error?: string // if not successful, the reason why
    roomID: string
    slotID: string
}

POST register-myself {
    userID: string
    sessionID: string
    roomID: string,
    slotID: string
} response {
    success: boolean
    error?: string
}

POST leave-room {
    userID: string
    sessionID: string
    roomID: string
} response {
    success: boolean
}

--------------------------------
INITIAL SOCKET HANDSHAKE

(client to server)
SOCKET register-socket {
    roomID: string
    sessionID: string
    userID?: string // if undefined, is spectator
    slotID?: string // if undefined is spectator
}

(server to client, in response)
SOCKET initialize-client {
    success: boolean
    error?: string
    data: SerializedRoom
    messages: ChatMessage[]
}

--------------------------------
EVENT UPDATE MESSAGES (SERVER TO CLIENT)

// anytime something besides chat changes
SOCKET on-change {
    data: SerializedRoom
}

// broadcasted to all sockets in room
SOCKET on-message {
    name: string,
    userIsPro: boolean,
    userIsPlayer: boolean,
    message: string
}

SOCKET VOLATILE on-update-board {
    slotID: string,
    board: Uint8Array, (encoded and decoded through encode-color-grid.ts)
}

SOCKET on-update-player {
    slotID: string,
    state: playerGameState.getJson()
}

WEBRTC update {
    // frame of board state / camera
    // game state if it changed
}

--------------------------------
CLIENT PUSH UPDATES (CLIENT TO SERVER)
SOCKET send-message {
    roomID: string
    name: string,
    userIsPro: boolean,
    userIsPlayer: boolean,
    message: string
}

SOCKET VOLATILE send-board { // send whenever the player's board CHANGES
    slotID: string,
    board: Uint8Array, (encoded and decoded through encode-color-grid.ts)
}

SOCKET send-player-state {
    slotID: this.slotID,
    state: playerGameState.getJson()
}

SOCKET player-leave-match { // called when wanting to switch status from player to spectator
    roomID: string,
    sessionID: string
}